{"version":3,"sources":["firebase.js","Font-size.js","Color-select.js","Post-it.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Fontsize","state","className","onChange","fontSize","props","getFontSize","target","value","htmlFor","type","id","name","defaultChecked","Component","Colorselect","action","colorName","getColorChoice","title","Postit","color","onClick","database","ref","noteId","remove","key","noteText","App","handleSubmit","event","preventDefault","userInput","text","alert","push","setState","charLimit","charLeft","numTyped","handleUserInput","charCount","length","newCharLeft","notes","on","result","note","val","newNotes","page","console","log","count","this","onSubmit","placeholder","maxLength","map","reverse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6608cb23.chunk.js","sourcesContent":["import firebase from 'firebase'\nimport 'firebase/database'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCfct_SIpVqCz1LBYZ4lfjVft5r06wKQ8U\",\n    authDomain: \"postitwall-d4718.firebaseapp.com\",\n    databaseURL: \"https://postitwall-d4718.firebaseio.com\",\n    projectId: \"postitwall-d4718\",\n    storageBucket: \"postitwall-d4718.appspot.com\",\n    messagingSenderId: \"874739315950\",\n    appId: \"1:874739315950:web:2c5b8bbe868bcae7e7afff\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from \"react\";\nclass Fontsize extends Component{\n    constructor(){\n        super()\n        this.state = {\n        }\n    }\n    render(){\n        return(\n            <li className=\"font-size\" onChange={(fontSize) => this.props.getFontSize(fontSize.target.value)}>\n                <label htmlFor=\"small\">Small</label>\n                <input type=\"radio\" id=\"small\" name=\"font-size\" value=\"small\" defaultChecked  />\n                <label htmlFor=\"med\">Medium</label>\n                <input type=\"radio\" id=\"med\" name=\"font-size\" value=\"med\" />\n                <label htmlFor=\"lrg\">Large</label>\n                <input type=\"radio\" id=\"lrg\" name=\"font-size\" value=\"lrg\" />\n                <label htmlFor=\"xlrg\">X-Large</label>\n                <input type=\"radio\" id=\"xlrg\" name=\"font-size\" value=\"xlrg\" />\n            </li>\n        )\n    }\n}\nexport default Fontsize","import React, { Component } from \"react\";\nimport \"./Post-it.css\"\n\nclass Colorselect extends Component {\n    constructor(){\n        super()\n        this.state = {\n\n        }\n    }\n    render(){\n        return (\n            <li className=\"color-select\" >\n                <form \n                    action=\"\" \n                    onChange={(colorName) => this.props.getColorChoice(colorName.target.value)}>\n                    <label \n                        htmlFor=\"yellow\" \n                        className=\"color-swatch yellow\" title=\"yellow\"></label>\n                    <input\n                        type=\"radio\"\n                        id=\"yellow\"\n                        value=\"yellow\"\n                        name=\"color-swatch\"\n                        defaultChecked=\"checked\"/>\n                    <label htmlFor=\"pink\" className=\"color-swatch pink\" title=\"pink\"></label>\n                    <input\n                        type=\"radio\"\n                        id=\"pink\"\n                        value=\"pink\"\n                        name=\"color-swatch\"/>\n                    <label htmlFor=\"teal\" className=\"color-swatch teal\" title=\"teal\"></label>\n                    <input\n                        type=\"radio\"\n                        id=\"teal\"\n                        value=\"teal\"\n                        name=\"color-swatch\"/>\n                    <label htmlFor=\"green\" className=\"color-swatch green\" title=\"green\"></label>\n                    <input\n                        type=\"radio\"\n                        id=\"green\"\n                        value=\"green\"\n                        name=\"color-swatch\"/>\n                </form>\n            </li>\n            );\n        }\n    }\n\nexport default Colorselect","import React from 'react';\nimport './Post-it.css';\nimport firebase from 'firebase'\n// catches notes in props\nconst Postit = (props) => {\n    const deleteNote = () => {\n        //   delete note is called \n        //  goes in database \n        // finds clicked note and deletes it\n        const itemRef = firebase.database().ref(props.noteId)\n        itemRef.remove()\n    }\n\n    return(\n        <li className={`${props.color} ${props.fontSize}`}>\n            {/* listens for a click and calls deleteNote */}\n            <span onClick={() => { deleteNote() }} className=\"delete\" title=\"delete note\">x</span>\n            {/* grab info from notes array(App.js) and places it in a postit */}\n            <p className=\"post-it--text\" key={props.noteId}>{props.noteText}</p>\n        </li>\n    )\n}\n\nexport default Postit;","import React, { Component } from 'react';\nimport firebase from './firebase';\nimport Fontsize from './Font-size.js'\nimport Colorselect from './Color-select.js'\nimport Postit from './Post-it';\n\nimport './setup.css'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      notes: [],\n      userInput: {\n        text: \"\",\n        color: \"yellow\",\n        fontSize: \"small\",\n        charLimit: 432,\n      },\n      charLeft: 432,\n      // numTyped number used to calculate how many characters are left if user selects different font size\n      // takes place in getFontSize function\n      numTyped: 0,\n    }\n    \n  }\n\ncomponentDidMount(){\n  // save firebase database in a variable\n  const dbRef = firebase.database().ref();\n  dbRef.on('value', (result) => {\n    const note = result.val();\n    const newNotes = [];\n    for (let page in note){\n      console.log(note[page].fontSize)\n      console.log(typeof note[page].fontSize)\n\n      // pushes the text and id of new notes into newNotes array\n      newNotes.push({noteText: note[page].text, noteId: page, color: note[page].color, fontSize: note[page].fontSize, count: note[page].charLimit}) \n    }\n    // updates notes on page\n    this.setState({\n      notes: newNotes\n    })\n  })\n}\nhandleSubmit = (event) => {\n  // prevent default behavior of submit button\n  event.preventDefault();\n  // if there is anything in userInput \n  if (this.state.userInput.text === \"\") { \n      alert(\"YOU DIDN'T WRITE ANYTHING! WRITE SOMETHING!\")\n  } else {\n    const dbRef = firebase.database().ref();\n    // this submits new notes to the firebase database\n    dbRef.push(this.state.userInput);\n    this.setState({\n      userInput: {\n        text: \"\",\n        color: this.state.userInput.color,\n        fontSize: this.state.userInput.fontSize,\n        charLimit: this.state.userInput.charLimit,\n      },\n      charLeft: this.state.userInput.charLimit,\n      numTyped: 0\n    });\n  }\n}\n\nhandleUserInput = (event) => {\n  //the length of characters that have been typed\n  const charCount = event.target.value.length;\n  // take the character limit that has been selected by the font size the user selects and subtract from how much has been typed in the textbox\n  const newCharLeft = this.state.userInput.charLimit - charCount;\n  // save what what the user is typing\n  this.setState({\n    userInput: {\n      text: event.target.value,\n      color: this.state.userInput.color,\n      fontSize: this.state.userInput.fontSize,\n      charLimit: this.state.userInput.charLimit,\n    },\n    charLeft: newCharLeft,\n    numTyped: charCount\n  })\n}\n\ngetColorChoice = (colorName) => {\n  this.setState({\n    userInput: {\n      color: colorName,\n      text: this.state.userInput.text,\n      fontSize: this.state.userInput.fontSize,\n      charLimit: this.state.userInput.charLimit,\n    },\n    charLeft: this.state.charLeft,\n    numTyped: this.state.numTyped\n  })\n}\n\ngetFontSize = (fontSize) => {\n  // // passes on the number of characters total for each size of text\n  if(fontSize === \"small\"){\n    // sets font size\n    this.setState({\n      userInput: {\n        color: this.state.userInput.color,\n        text: this.state.userInput.text,\n        fontSize: fontSize,\n        charLimit: 432,\n      },\n      charLeft: 432 - this.state.numTyped,\n      numTyped: this.state.numTyped\n    })\n  } else if (fontSize === \"med\"){\n    // sets font size\n    this.setState({\n      userInput: {\n        color: this.state.userInput.color,\n        text: this.state.userInput.text,\n        fontSize: fontSize,\n        charLimit: 198,\n      },\n      charLeft: 198 - this.state.numTyped,\n      numTyped: this.state.numTyped\n    })\n  } else if (fontSize === \"lrg\"){\n    // sets font size\n    this.setState({\n      userInput: {\n        color: this.state.userInput.color,\n        text: this.state.userInput.text,\n        fontSize: fontSize,\n        charLimit: 104,\n      },\n      charLeft: 104 - this.state.numTyped,\n      numTyped: this.state.numTyped\n    })\n  } else if (fontSize === 'xlrg'){\n    // sets font size\n    this.setState({\n      userInput: {\n        color: this.state.userInput.color,\n        text: this.state.userInput.text,\n        fontSize: fontSize,\n        charLimit: 77,\n      },\n      charLeft: 77 - this.state.numTyped,\n      numTyped: this.state.numTyped\n    })\n  } else {\n    // sets font size\n    this.setState({\n      userInput: {\n        color: this.state.userInput.color,\n        text: this.state.userInput.text,\n        fontSize: fontSize,\n        charLimit: 432,\n      },\n      charLeft: 432 - this.state.numTyped,\n      numTyped: this.state.numTyped\n    })\n  }\n}\nrender () {\n  return (\n    <div className=\"App wrapper\">\n      <header>\n        <ul className=\"app-controls\">\n          {/* below is the format for blank list items used to balance out the header when there is an odd of features. A list item with the class of .blank-for-now is added at the opposite end for the header, resulting in the textarea being center front of the page. */}\n          {/* <li className=\"blank-for-now\"></li> */}\n\n          {/* displays font size widget. */}\n          < Fontsize getFontSize={this.getFontSize}  />\n\n          {/* the note taking section including a textarea to take notes and a character counter that shows how many more characters you can add. */}\n          <li className=\"main-header-list-item\">\n            <h1>POST IT!!!</h1>\n            <form action=\"\" onSubmit={this.handleSubmit}>\n              <label htmlFor=\"textInput\">\n                Write notes about what ever you want! Keep track of thoughts!\n                Get inspired! Have some quotes? Pick a color! Pick a font size! Postem here!\n              </label>\n              <textarea\n                value={this.state.userInput.text}\n                onChange={this.handleUserInput}\n                placeholder=\"Write notes about what ever you want! Keep track of thoughts! Get inspired! Have some quotes? Pick a color! Pick a font size! Postem here!\"\n                name=\"textInput\"\n                maxLength={this.state.userInput.charLimit}\n              />\n              <span className=\"charCount\" >{this.state.charLeft}/ {this.state.userInput.charLimit}</span>\n              <input type=\"submit\" value=\"Post!\" className=\"submit\" title=\"post your note\" />\n            </form>\n          </li>\n\n          {/* displays color selection for the notes */}\n          <Colorselect getColorChoice={this.getColorChoice} />\n\n        </ul>\n      </header>\n      <main>\n        <ul className=\"post-it-notes\">\n          {this.state.notes.map((note) => {\n            return (\n              // pass info to Post-it notes\n              <Postit\n                noteId={note.noteId}\n                noteText={note.noteText}\n                color={note.color}\n                fontSize={note.fontSize}\n              />\n            );\n          }).reverse()}\n        </ul>\n      </main>\n      <footer>\n        <span>Designed and created by Marie O'Shaughnessy</span>\n      </footer>\n    </div>\n  );\n  }\n}\n\nexport default App;\n\n//text input\n    // placeholder text in input textbox explaining how to use app\n    //empty text from note\n    // submit button adds text to page \n    // STRETCH GOAL different size of post it to chose from\n    // STRETCH GOAL pick different color of post it\n\n// takes text and stores it in firebase database\n    // save key in a variable\n    // save text in a variable\n        // save these in state\n    // saving post its in objects\n    // push objects into an array\n    // setState array in constructor\n\n// display text\n    // arguments pass key and text of post it\n    // STRETCH GOAL pass color/size\n    // display post it\n\n\n// on post it << component\n    // delete post it with little X in corner\n    // displays content of note \n        // content is limited to a number of characters (approx 590)\n    // STRETCH GOAL allow to drag and move post it\n    // STRETCH GOAL an edit pen in the corner allowing you to edit notes \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}